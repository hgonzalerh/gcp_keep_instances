- name: Restore deleted VMs from VEEAM
  hosts: localhost
  gather_facts: false

  module_defaults:
    ansible.builtin.uri:
      validate_certs: false

  tasks:
    # OPERATING FIRST ON GCP
    - name: Get info on running instances
      google.cloud.gcp_compute_instance_info:
        zone: us-central1-a
        project: "{{ gcp_project }}"
      register: gcp_instance_info

    - name: Show running instances by name
      ansible.builtin.debug:
        msg: >-
              {{
              gcp_instance_info.resources
              | map(attribute='name')
              }}
              
    - name: Show running instances by id
      ansible.builtin.debug:
        msg: >-
              {{
              gcp_instance_info.resources
              | map(attribute='id')
              }}

    - name: Show running instances by *OriginalId*
      ansible.builtin.debug:
        msg: >-
              {{
              gcp_instance_info.resources
              | map(attribute='metadata.items') |flatten | selectattr('key','equalto','OriginalId')| map(attribute='value') | list
              }}

    - name: Add new and old ids
      ansible.builtin.set_fact:
        total_running_ids: >-
              {{
              (gcp_instance_info.resources
              | map(attribute='metadata.items') |flatten | selectattr('key','equalto','OriginalId') | list ) +
              (gcp_instance_info.resources
              | map(attribute='id') | list )
              }}
    # - name: Fail for debugging
    #   ansible.builtin.fail:

    - name: Log on and get an Auth token from VEEAM backup
      ansible.builtin.uri:
        url: "https://{{ veeam_appliance_ip_port }}/api/v1/token"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          x-api-version: "1.3-rev0"
        body:
          grant_type: "password"
          username: "{{ veeam_username }}"
          password: "{{ veeam_password }}"
        body_format: form-urlencoded
      register: veeam_login

    - name: Save veeam login result
      ansible.builtin.set_fact:
        veeam_access_token: "{{ veeam_login.json.access_token }}"

    - name: Get all instances active on VEEAM
      ansible.builtin.uri:
        url: "https://{{ veeam_appliance_ip_port }}/api/v1/vmInstances"
        method: GET
        headers:
          x-api-version: "1.3-rev0"
          Authorization: "Bearer {{ veeam_access_token }}"
        validate_certs: false
      register: veeam_instances

    - name: Print instances active on VEEAM (ids only)
      ansible.builtin.debug:
        msg: "{{ veeam_instances.json.data | map(attribute='id') }}"

    # - name: Print instances active on VEEAM (full data)
    #   ansible.builtin.debug:
    #     msg: "{{ veeam_instances.json.data }}"
    #     verbosity: 2

    - name: Get all restore points for every instance backed up by VEEAM
      ansible.builtin.uri:
        url: "https://{{ veeam_appliance_ip_port }}/api/v1/vmInstance/restorePoints"
        method: GET
        headers:
          x-api-version: "1.3-rev0"
          Authorization: "Bearer {{ veeam_access_token }}"
      register: veeam_restorepoints
    
    - name: Show information about all restore points
      ansible.builtin.debug:
        msg: >-
              {{
              veeam_restorepoints.json.data
              }}
        verbosity: 2

    - name: Show all vmids that have a backup
      ansible.builtin.debug:
        msg: >-
              {{
              veeam_restorepoints.json.data
              | map(attribute='vmInstanceId')
              | unique
              }}

    - name: Calculate machines to RESTORE (list difference)
      ansible.builtin.set_fact:
        restore_vmid_list: >-
          {{
          ( veeam_restorepoints.json.data | map(attribute='vmInstanceId'))
          | difference(total_running_ids))
          }}

    # - name: Calculate machines to RESTORE (list difference)
    #   ansible.builtin.set_fact:
    #     restore_vmid_list: >-
    #       {{
    #       ( veeam_restorepoints.json.data | map(attribute='vmInstanceId'))
    #       | difference(gcp_instance_info.resources | map(attribute='id'))
    #       }}

    - name: Fail by design
      ansible.builtin.fail:
      
    - name: Show restore vmid list
      ansible.builtin.debug:
        var: restore_vmid_list
        verbosity: 2   

    - name: Get latest restorepoints for each vmid
      ansible.builtin.set_fact:
        latest_snapshots: >-
          {{ (latest_snapshots | default([])) + 
          [
          veeam_restorepoints.json.data | 
          selectattr('type', 'equalto', 'Snapshot') |
          selectattr('vmInstanceId', 'equalto', item) |
          sort(attribute='creationTimeUtc') |
          last 
          ]
          }}
      loop: "{{ restore_vmid_list }}"

    - name: Show snapshots to restore
      ansible.builtin.debug:
        var: latest_snapshots
        verbosity: 2 

    - name: Get Veeam Service Account needed for operating
      ansible.builtin.uri:
        url: "https://{{ veeam_appliance_ip_port }}/api/v1/serviceAccounts"
        method: GET
        headers:
          x-api-version: "1.3-rev0"
          Authorization: "Bearer {{ veeam_access_token }}"
      register: veeam_serviceaccounts

    - name: Print Veeam Service Accounts
      ansible.builtin.debug:
        msg: "{{ veeam_serviceaccounts }}"
        verbosity: 2

    - name: Do a restore of all missing vms using their latest restorepoint
      ansible.builtin.uri:
        url: "https://{{ veeam_appliance_ip_port }}/api/v1/vmInstance/restorePoints/{{ item.id }}/restoreInstance"
        method: POST
        headers:
          x-api-version: "1.3-rev0"
          Authorization: "Bearer {{ veeam_access_token }}"
          Content-Type: application/json
        body_format: json
        body:
          projectId: "qa-itsm-cloud"
          # Use first service account that was found
          serviceAccountId: "{{ veeam_serviceaccounts.json.data[0].id }}"
          # INTO ORIGINAL LOCATION
          restoreToOriginal: true
      loop: "{{ latest_snapshots }}"
